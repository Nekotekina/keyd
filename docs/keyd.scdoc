keyd(1)

# NAME

*keyd++* - A key remapping daemon (extended version).

# SYNOPSIS

*keyd* [command] [options]

# COMMANDS

*monitor [-t]*
	Print key events. If -t is supplied, also prints time since the last event in ms. Useful for discovering key names/device ids and debugging.

*listen*
	Print layer state changes of the running keyd daemon to stdout. Useful for scripting.

*bind reset|push|pop|pop_all|<binding> [<binding>...]*
	Apply the supplied bindings. See _Bindings_ for details.

*reload*
	Reload config files. When runs from user with keyd group, additionally applies _~/.config/keyd/bindings.conf_

*list-keys*
	List valid key names.

*input [-t <timeout>] <text> [<text>...]*
	Input the supplied text. If no arguments are given, read the input from STDIN.
	A timeout in microseconds may optionally be supplied corresponding to the time
	between emitted events.

*do [-t <timeout>] [<exp>]*
	Execute the supplied expression. See MACROS for the format of <exp>. If no arguments are given, the expression is read from STDIN. If supplied, <timeout> corresponds to the macro_sequence_timeout. This macro expression is _not_ allowed to execute shell commands.

# OPTIONS

*-v, --version*
	Print the current version and exit.

*-h, --help*
	Print help and exit.

# DESCRIPTION

keyd is a system wide key remapping daemon which supports features like
layering, oneshot modifiers, and macros. In its most basic form it can be used
to define a custom key layout that persists across display server boundaries
(e.g wayland/X/tty).

The program runs in the foreground, printing diagnostic information to the
standard output streams, and is intended to be run as a single instance managed
by the init system.

*NOTE:*

Because keyd modifies your primary input device, it is possible to render your
machine unusable with a bad config file. If you find yourself in this situation
the panic sequence *<backspace>+<escape>+<enter>* will force keyd to
terminate.

# CONFIGURATION

Configuration files loosely follow an INI style format consisting of headers of
the form _[section_name]_ followed by a set of _bindings_.  Lines beginning
with a hash are ignored.

Config files are stored in _/etc/keyd/_ and loaded upon initialization.
The reload command can be used to update the working set of config
files (e.g sudo keyd reload).

A valid config file has the extension _.conf_ and *must* contain _[ids]_
section that has one of the following forms:

```
	[ids]

	<id 1 (obtained via keyd monitor)>
	<id 2>
	...
```

or

```
	[ids]

	k:*
	m:*
	-<id 1>
	-<id 2>
	...
```

The first form specifies a list of ids to be explicitly matched, while the
second matches any id which has not been explicitly excluded.

For example:

```
	[ids]
	k:*
	-0123:4567
```


Will match all keyboards which *do not*(2) have the id _0123:4567_, while:

```
	[ids]

	0123:4567
```

will exclusively match any devices which do. Device ids can be obtained from
the monitor command (see _COMMANDS_). Note that a device id may only be
listed in a single config file.

Each subsequent section of the file corresponds to a _layer_ (with the exception
of _[global]_ (see _GLOBALS_) and _[aliases]_.

Config errors will appear in the log output and can be accessed in the usual
way using your system's service manager (e.g sudo journalctl -eu keyd).

If an id matches more than one device type, the prefix k: may
be used to exclusively match keyboards and the prefix m: may be used to
exclusively match mice. (E.g m:046d:b01d)

Note: All keyboards defined within a given config file will share the
same state. This is useful for linking separate input devices together
(e.g foot pedals).

Note 2: *Mouse support is currently experimental*, and is mostly confined to
traditional mice. Adding some mice to your ids section may break your pointer.
*It may also be necessary to explicitly blacklist mice which are misidentified
as keyboards (e.g if you find your moused misbehaving).*

## Layers

A layer is a collection of _bindings_, each of which specifies the behaviour of
a particular key. Multiple layers may be active at any given time, forming a
stack of occluding keymaps consulted in activation order. The default layer is
called _main_ and is where common bindings should be defined.

For example, the following config snippet defines a layer called _nav_
and creates a toggle for it in the _main_ layer:

```
	[main]

	capslock = layer(nav)

	[nav]

	h = left
	k = up
	j = down
	l = right
```

When capslock is held, the _nav_ layer occludes the _main_ layer
causing _hjkl_ to function as the corresponding arrow keys.

Example with handling modifiers:

```
	[main]

	capslock = layer(capslock+control)

	[capslock]

	C-j = down
```

will cause _capslock_ to behave as _control_, except in the case of _capslock+j_, which will
emit _down_. This makes it trivial to define custom modifiers which don't interfere with
one another.

Formally, each layer section heading has the following form:

```
	"[" [<left-hand modifiers>]<layer name>[<added right-hand modifiers>] "]"
```

Where left-hand modifiers has the form:

	_[\*\*][<modifier1>-][<wildcard2>\*]..._

and added right-hand modifiers has the form:

	_[\*\*][-<modifier1>][\*<wildcard2>]..._

and each modifier or wildcard is one of:

	*C* - Control++
*M* - Meta/Super++
*A* - Alt++
*S* - Shift++
*G* - AltGr++
*H* - Hyper (unset by default)++
*L* - Layer 5 (unset by default)++
*N* - Another unset modifier (named mod7 internally)++
*\*\** - Full wildcard implies *any* combinations of modifiers

Finally, each layer heading is followed by a set of bindings which take the form:

	<key> | <alias> = <key>|<macro>|<action>

for a description of <action> and <macro> see _ACTIONS_ and _MACROS_.

Apart from _[main]_, there are 8 built-in layers corresponding to each modifier.

	*[ctrl]* or *[control]*++
*[alt]*++
*[shift]*++
*[altgr]*++
*[meta]* or *[super]*++
*[hyper]*++
*[layer5]*++
*[mod7]* or *[nlock]*

Example:

```
	[ids]
	k:*

	[main]
	C-j = down
```

is a completely valid config, which does what the benighted user might expect.

If multiple bindings for the same key are present, the most recent one takes precedence.
If bindings contain wildcards on the left side, they have lower priority than exact ones.

A layer heading may also appear multiple times, each time section-specific mods apply.

That is:

```
[mylayer-A]
a = b
c = d

[mylayer-C]
a = x
b = c
```

is equivalent to:

```
[mylayer]
a = C-x
b = C-c
c = A-d
```

## Composite Layers

A special kind of layer called a *composite layer* can be defined by creating a
layer with a name consisting of existing layers delimited by _+_. The resultant
layer will be activated and given precedence when all of its constituents are
activated.

E.g.

```
	[control+alt]
	h = left
```

will cause the sequence _control+alt+h_ to produce _left_. But instead,
it would be easier to add _C-A-h = left_ to the _[main]_ with similar result.


```
	[main]
	capslock = layer(capslock)

	[capslock+ctrl]
	h = right

	[capslock+shift]
	C-h = left
```

Will cause the sequence _capslock+shift+h_ to produce _left_, while preserving the expected functionality of _capslock_ and _shift_ in isolation.

## Chording

_Chords_ are groups of keys which are treated as a unit when simultaneously
depressed. A chord can be defined by using a group of + delimited key names as
a left hand value. The corresponding action will be activated if all keys are
struck within the chording interval (_chord_timeout_). Using chords is **not**
recommended as they introduce typing latency for chord components. There is
also possibility of unexpected results and bugs.

E.g

```
j+k = esc
```

will cause _esc_ to be produced if both _j_ and _k_ are simultaneously depressed.

Note: It may be desirable to change the default chording interval (50ms) to
account for the physical characteristics of your keyboard.

## Unicode Support

If keyd encounters a valid UTF8 sequence as a right hand value, it will try and
translate that sequence into a macro which emits a keyd-specific XKB sequence.

In order for this to work, the sequences defined in the compose file shipped
with keyd (_/usr/share/keyd/keyd.compose_) must be accessible. This can be achieved
globally by copying the file to the appropriate location in
_/usr/share/X11/locale_, or on a per-user basis by symlinking it to
~/.XCompose.

E.g.

	ln -s /usr/share/keyd/keyd.compose ~/.XCompose

**Additionally you will need to be using the default US layout on your
display server.** Users of non-english layouts are advised to set their layout
within keyd as layers to avoid conflicts between the display server
layout and keyd's unicode functionality. It's recommended to setup
international English keyboard with AltGr dead key support.

**Note:** You may have to restart your computer for this to take effect.

**Note 2:** Unicode cannot have attached modifiers, i.e. _C-A-Ã¦_ is invalid.

## Aliases

Each key may optionally be assigned an *alias*. This alias may be used in place
of the key as a valid left hand value. Multiple keys may be bound to the same alias.

There are builtin aliases, like 'meta', 'ctrl' (equals 'control'), 'altgr'.
Thus the binding 'meta = a' by default is equivalent to the two bindings:
'leftmeta = a' and 'rightmeta = a'.

Aliases are defined in a special section called 'aliases' where each line takes
the two possible forms:

	<key> = <name>
	<key_id> = <mod_id>

_<key>_ must be a valid left-hand key name (can contain wildcards and mofifiers),
_<name>_ must be a name not used by keys (cannot contain modifiers),
_<key_id>_ is a key name without modifiers or imbued shift.
Finally, _<mod_id>_ is one of A, C, M, G, S, H, L, N modkeys.
Modkeys affect builtin aliases mentioned before.
If key is assigned to some mod, it's removed from all other mods.

For example:

```
/etc/keyd/common:
	[**main**]
	meta = oneshot(meta)
	alt = oneshot(alt)

	a = a
	s = o
	# etc..

/etc/keyd/default.conf:
	[ids]
	k:*

	include common

/etc/keyd/magic_keyboard.conf:
	[ids]
	004c:0267

	[aliases]
	leftalt = M
	rightalt = M
	leftmeta = A
	rightmeta = A

	include common
```

Allows the user to define a set of universal bindings in /etc/keyd/common
without having to explicitly account for the transposed meta and alt keys within
the included config snippet.

## File Inclusion

Config files may include other files located within the config directory using
the _include_ keyword. A line of the form *include <file>* may appear at any
point after the [ids] section. The resultant config will behave as though the
contents of the included file appear in place of the include statement.

Making strategic use of these statements makes it possible to share common
functionality between configs.

Include paths are relative and must be placed in one of the following
directories:
	- /etc/keyd/
	- /usr/share/keyd/

Limitations:

	- Included files should not end in .conf.

# GLOBALS

A special section called _[global]_ may be defined in the file and can contain
any of the following options:

	*macro_timeout:* The time (in milliseconds) separating the initial execution of a macro
	sequence and the first repetition.
	(default: 600)

	*macro_repeat_timeout:* The time separating successive executions of a macro.
	(default: 50)

	*layer_indicator:* If set, this will turn the specified LED on whenever a layer is active.
	Example values: NUM_LOCK=0, CAPS_LOCK=1, SCROLL_LOCK=2
	(default: 255)

	*macro_sequence_timeout:* If set, this will add a timeout (*in
	microseconds*) between each emitted key in a macro sequence. This is
	useful to avoid overflowing the input buffer on some systems.

	*chord_timeout:* The maximum time between successive keys
	interpreted as part of a chord.
	(default: 50)

	*chord_hold_timeout:* The length of time a chord
	must be held before being activated.
	(default: 0)

	*oneshot_timeout:* If non-zero, timeout a oneshot layer
	activation after the supplied number of milliseconds.
	(default: 0)

	*disable_modifier_guard:* By default, keyd will inject additional
	control keypresses where necessary in order to prevent programs from
	seeing additional modifier taps (E.g alt in firefox). If set, this
	option disables that behaviour.
	(default: 0)

	*overload_tap_timeout:* If non-zero, ignore the tap behaviour of an
	overloaded key if it is held for the given number of miliseconds.
	(default: 0).


*Note:* Unicode characters and key sequences are treated as macros, and
are consequently affected by the corresponding timeout options.

# MACROS

Various keyd actions accept macro expressions.

A macro expression has one of the following forms:

	. macro(<exp>)
	. [<modifier 1>[-<modifier 2>...]-<key>
	. <char>

Where _<char>_ is a valid unicode character and _<exp>_ has the form _<token1> [<token2> ...]_ and each token is one of:

	- A valid key code.
	- A type 2 macro.
	- A unicode character.
	- A group of key codes delimited by + to be depressed as a unit.
	- A timeout of the form _<time>ms_ (where _<time>_ < 1024).
	- A command to execute of the form _cmd(<shell command>)_, similar to command() action.
	- A command to type text of the form _type(<text>)_, or 't()', 'text()', 'txt()'.

The following are all valid macro expressions:

	- C-a
	- macro(C-a)
	- macro(leftcontrol+leftmeta) # simultaneously taps the left meta and left control keys
	- A-M-x
	- macro(type(hello world))
	- macro(h e l l o space w o r ld) (identical to the above)
	- macro(C-t 100ms g o o g l e . c o m enter)
	- macro(cmd(brightness down))

Wildcards are not allowed inside a macro, but special _\*\*macro()_ form is possible.

Splitting into smaller tokens serves as an escaping mechanism: _macro(space)_
inserts a space but _macro(s p a c e)_ writes "space". Likewise, _macro(3+5)_
depresses the 3 and 5 keys as a unit while _macro(3 + 5)_ writes "3+5".

Some prerequisites are needed for non-ASCII characters to work, see _Unicode Support_.

# ACTIONS

A key may optionally be bound to an _action_ which accepts zero or more arguments.

*layer(<layer>)*
	Activate the given layer for the duration of the keypress.

*oneshot(<layer>)*

	If tapped, activate the supplied layer for the duration of the next keypress.

*swap(<layer>)*
	Swap the currently active layer with the supplied one. If the current
	layer is toggled, it is deactivated and the supplied layer is toggled
	instead. Otherwise, the active layer is deactivated and the supplied
	layer remains active for the duration of the depression of the
	activating key.

```
	[control]

	x = swap(xlayer)

	[xlayer]

	s = C-s
	b = S-insert
```

	NOTE:

	You probably don't need to use this unless you are trying to do something quite
	involved. Think hard about whether or not what you are trying to achieve
	can be done by other means, as it is easy to end up in states which
	are impossible to exit.

*setlayout(<layer>)*
	Set the specified layer as a current layout.

*clear()*
	Clear any toggled or oneshot layers.

*toggle(<layer>)*
	Permanently toggle the state of the given layer.

*layerm(<layer>, <macro>)*
	Identical to *layer*, but executes the supplied macro before the layer change.

*oneshotm(<layer>, <macro>)*
	Identical to *oneshot*, but executes the supplied macro before the layer change.

*swapm(<layer>, <macro>)*
	Identical to *swap*, but accepts a macro to be executed immediately
	after the layer change.

*togglem(<layer>, <macro>)*
	Equivalent to *toggle*, but additionally executes the supplied macro before
	toggling the layer.

*clearm(<macro>)*
	Identical to *clear*, but executes the supplied macro before clearing layers.

## Key overloading

*overload(<layer>, <action>)*
	Activates the given layer while held and executes <action> on tap.

*overloadm(<layer>, <macro>, <action>)*
	Same as overload but executes a macro immediately.

*overloadt(<layer>, <action>, <timeout>)*
	Identical to overload, but only activates the layer if the bound key is
	held for \<timeout\> milliseconds. This is mainly useful for overloading keys
	which are commonly struck in sequence (e.g letter keys).

	Note that this will add a visual delay when typing, since overlapping
	keys will be queued until the timeout expires or the bound key is
	released.

*overloadt2(<layer>, <action>, <timeout>)*
	Identical to overloadt, but additionally resolves as a hold in the
	event of an intervening key tap.

*overloadi(<action 1>, <action 2>, <idle timeout>)*
	Activate <action 1> if the last non-action (i.e symbol) key was struck less
	than <timeout> milliseconds ago, otherwise activate <action 2>.

	This can be used in combination with other overload timeouts and is particularly
	useful for overloading letter keys (often called 'homerow mods').

	For example:

```
	a = overloadi(a, overloadt2(control, a, 200), 150)
```

	will produce _a_ if and only if:

		- _a_ is struck within 150ms of another non-action key.
		- _a_ is struck more than 150ms after the last non-action key but held for less than 200ms
		  and there are no intervening key taps.

	This reduces the visual latency by immediately resolving the key as a letter when
	typed midword, but also facilitates its use as a layer trigger if it is held for a long
	enough period with no intervening symbols.

	Since this is a common usecase, a macro called *lettermod* (defined below) has been
	defined to facilitate such definitions.

*lettermod(<layer>, <key>, <idle timeout>, <hold timeout>)*
	An alias for:

		*overloadi(<key>, overloadt2(<layer>, <key>, <hold timeout>), <idle timeout>)*

*timeout(<action 1>, <timeout>, <action 2>)*
	If the key is held in isolation for more than _<timeout> ms_, activate the second
	action, if the key is held for less than _<timeout> ms_ or another key is struck
	before <timeout> ms expires, execute the first action.

	E.g.

	timeout(a, 500, layer(control))

	Will cause the assigned key to behave as _control_ if it is held for more than
	500 ms.

*macro2(<timeout>, <repeat timeout>, <macro>)*
	Creates a macro with the given timeout and repeat timeout. If a timeout value of 0 is used,
	macro repeat is disabled.

	Note that <macro> must be a valid macro expression.

	E.g.
```
	macro2(400, 50, macro(Hello space World))
	macro2(120, 80, left)
```
*command(<shell command>)*
	Execute the given shell command.

	E.g.

	command(brightness down)

*NOTE:* Commands defined in system-wide config are executed by the user running the keyd process
(probably root), **but** commands added via IPC inherit the process' credentials and environmentals.

*noop*
	Do nothing.

# IPC

Running `keyd` daemon can be accessed by users in `keyd` group or root.

Be careful with adding users to `keyd` group as they can modify mappings.

For instance, the user may use this functionality to write a script which
alters the keymap when they switch between different tmux sessions.

The application remapping tool (*keyd-application-mapper(1)*) which ships with keyd
is a good example of this. It is a small python script which performs event
detection for the various display servers (e.g X/sway/gnome, etc) and feeds the
desired mappings to the core using _bind_ command.

## Bindings

The _bind_ command accepts one or more _bindings_, each of which must have the following form:

	\[<layer>.\]<key> = <key>|<macro>|<action>

Where _<layer>_ is the name of an (existing) layer in which the key is to be bound.

As a special case, the string "reset" may be used in place of a binding, in
which case the current keymap will revert to its last loaded state (all
dynamically applied bindings will be dropped).

Examples:

```
	$ keyd bind '- = C-c'
	$ keyd bind reset '+ = C-c' # Reset the keyboard before applying the '+' binding (drops the previous '-' binding)
```

By default expressions apply to the most recently active keyboard.

# EXAMPLES

## Example 1

Make _esc+q_ toggle the dvorak letter layout.

```
	[ids]
	k:*

	[main]
	esc = layer(esc)
	[esc]
	q = toggle(dvorak)

	[**dvorak**]

	a = a
	s = o
	...


```

## Example 2

Invert the behaviour of the shift key without breaking modifier behaviour.

```
	[ids]
	k:*

	[main]
	1 = !
	2 = @
	3 = #
	4 = $
	5 = %
	6 = ^
	7 = &
	8 = *
	9 = (
	0 = )

	[shift]
	0 = 0
	1 = 1
	2 = 2
	3 = 3
	4 = 4
	5 = 5
	6 = 6
	7 = 7
	8 = 8
	9 = 9
```

## Example 3

Tapping control once causes it to apply to the next key, tapping it twice
activates it until it is pressed again, and holding it produces expected
behaviour.

```
	[main]

	control = oneshot(control)

	[control]

	control = toggle(control)
```

## Example 4

Meta behaves as normal except when \` is pressed, after which the alt_tab layer
is activated for the duration of the leftmeta keypress. Subsequent actuations
_will thus produce A-tab instead of M-\\_.

```
	[meta]

	` = swapm(alt_tab+alt, A-tab)

	[alt_tab]

	A-tab = A-S-tab
	A-` = A-tab
```

## Example 5

```
	# Uses the compose key functionality of the display server to generate
	# international glyphs.  # For this to work 'setxkbmap -option
	# compose:menu' must # be run after keyd has started.

	# A list of sequences can be found in /usr/share/X11/locale/en_US.UTF-8/Compose
	# on most systems.


	[main]

	rightalt = layer(dia)

	[dia]

	# Map o to Ã¶
	o = macro(compose o ")

	# Map e to â¬
	e = macro(compose c =)
```

## Example 6

```
	# Holding both shift keys will activate capslock.

	[main]

    # Without a delay, you may have capslock turn on as you type
    S-shift = timeout(**, 1000, capslock)
```

## Example 7

Capslock will behave as control in all instances except when used
in conjunction with 'h/j/k/l' in which case it will produce arrow
keys. If tapped, it will function as escape.

```
	[main]
	capslock = overload(capslock+ctrl, esc)
	**capslock = layer(capslock+ctrl)
	esc = capslock

	[C-capslock]
	h = left
	k = up
	j = down
	l = right
```

## Example 8

Disables the esc and end keys.

```
	[main]
	**esc = noop
	**end = noop
```

# ENVIRONMENT VARIABLES

*KEYD_DEBUG*
	Debug log level. _0_,_1_,_2_ can be specified (default: 0).

# AUTHOR

Written by Raheman Vaiya (2017-) in C.
Port to C++ in progress by Nekotekina.
